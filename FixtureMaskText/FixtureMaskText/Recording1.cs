///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;
using System.IO;


using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace FixtureMaskText
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Recording1 recording.
    /// </summary>
    [TestModule("9ab50ae7-5580-449e-8d31-7d53472991db", ModuleType.Recording, 1)]
    public partial class Recording1 : ITestModule
    {
        /// <summary>
        /// Holds an instance of the FixtureMaskTextRepository repository.
        /// </summary>
        public static FixtureMaskTextRepository repo = FixtureMaskTextRepository.Instance;

        static Recording1 instance = new Recording1();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Recording1()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Recording1 Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "7.0")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "7.0")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            if (File.Exists("C:\\QVI\\Snap-X\\Config\\FixtureMask.bmp"))
            {
                File.Delete("C:\\QVI\\Snap-X\\Config\\FixtureMask.bmp");
            }
            

            bool bBigMode = true;

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SnapXUntitled.TextMeasure' at 29;10.", repo.SnapXUntitled.TextMeasureInfo, new RecordItemIndex(0));
            repo.SnapXUntitled.TextMeasure.MoveTo("29;10");
            Delay.Milliseconds(200);
            bBigMode = repo.SnapXUntitled.TextMeasure.Visible;

            if (bBigMode)
            {
                Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SnapXUntitled.FixtureSubstractionButton' at 22;15.", repo.SnapXUntitled.FixtureSubstractionButtonInfo, new RecordItemIndex(2));
                repo.SnapXUntitled.FixtureSubstractionButton.Click("22;15");
                Delay.Milliseconds(200);
            }
            else
            {
                Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SnapXUntitled.SwitchToSensor' at 16;11.", repo.SnapXUntitled.SwitchToSensorInfo, new RecordItemIndex(1));
                repo.SnapXUntitled.SwitchToSensor.Click("16;11");
                Delay.Milliseconds(200);
            }
            
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SnapXUntitled.FixtureSubstractionButton' at 22;15.", repo.SnapXUntitled.FixtureSubstractionButtonInfo, new RecordItemIndex(2));
            repo.SnapXUntitled.FixtureSubstractionButton.Click("22;15");
            Delay.Milliseconds(200);
                        
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SNAPX.InspectedTitle' at 84;10.", repo.SNAPX.InspectedTitleInfo, new RecordItemIndex(3));
            repo.SNAPX.InspectedTitle.Click("84;10");
            Delay.Milliseconds(200);

            string strTitleText = repo.SNAPX.InspectedTitle.Text;
            string strHardcodedTitleText = "SNAP-X";
            UtilityRun.CompareTitleText(strTitleText, strHardcodedTitleText);
            Delay.Milliseconds(200);
               

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SNAPX.InspectedText' at 43;12.", repo.SNAPX.InspectedTextInfo, new RecordItemIndex(4));
            repo.SNAPX.InspectedText.Click("43;12");
            Delay.Milliseconds(200);

            string strPromptText = repo.SNAPX.InspectedText.TextValue;
            string strHardcodedPromptText = "Fixture mask not yet created.\nPlease, create fixture mask first.";
            UtilityRun.CompareTitleText(strPromptText, strHardcodedPromptText);
            Delay.Milliseconds(200);

                 
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(5));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            	

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SnapXUntitled.FixtureSubstractionButton' at 48;15.", repo.SnapXUntitled.FixtureSubstractionButtonInfo, new RecordItemIndex(6));
            repo.SnapXUntitled.FixtureSubstractionButton.Click("48;15");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DropDownButton.CreateFixtureMask' at 65;17.", repo.DropDownButton.CreateFixtureMaskInfo, new RecordItemIndex(7));
            repo.DropDownButton.CreateFixtureMask.Click("65;17");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SNAPX.InspectedTitle' at 95;9.", repo.SNAPX.InspectedTitleInfo, new RecordItemIndex(8));
            repo.SNAPX.InspectedTitle.Click("95;9");
            Delay.Milliseconds(200);

            string strCreateFixtureTitle = repo.SNAPX.InspectedTitle.Text;
            string strHardcodedCreateFixtureTitle = "SNAP-X";
            UtilityRun.CompareTitleText(strCreateFixtureTitle, strHardcodedCreateFixtureTitle);
            Delay.Milliseconds(200);           


            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SNAPX.InspectedText' at 58;17.", repo.SNAPX.InspectedTextInfo, new RecordItemIndex(9));
            repo.SNAPX.InspectedText.Click("58;17");
            Delay.Milliseconds(200);

            string strCreateFixtureText = repo.SNAPX.InspectedText.TextValue;
            string strHardcodedCreateFixtureText = "Please remove all parts from the stage.\nPress Ok to continue.";
            UtilityRun.CompareTitleText(strCreateFixtureText, strHardcodedCreateFixtureText);
            Delay.Milliseconds(200);

            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Right}'.", new RecordItemIndex(10));
            Keyboard.Press("{Right}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(11));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SnapXUntitled.CreateFixtureMask' at 48;17.", repo.SnapXUntitled.CreateFixtureMaskInfo, new RecordItemIndex(12));
            repo.SnapXUntitled.CreateFixtureMask.Click("48;17");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DropDownButton.FixtureWithMask' at 57;16.", repo.DropDownButton.FixtureWithMaskInfo, new RecordItemIndex(13));
            repo.DropDownButton.FixtureWithMask.Click("57;16");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(14));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
